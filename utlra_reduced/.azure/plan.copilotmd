# Azure Deployment Plan for RAG-Transmission-Data Project

## **Goal**
Deploy the RAG Transmission Data FastAPI application to Azure App Service with blob storage integration for optimal performance and cost efficiency.

## **Project Information**
**RAG-Transmission-Data**
- **Stack**: FastAPI (Python 3.11) with Azure Blob Storage
- **Type**: RAG (Retrieval-Augmented Generation) chatbot for electrical transmission line data
- **Data Storage**: Azure Blob Storage (36MB FAISS index + metadata)
- **Dependencies**: Google Gemini AI API, Azure Blob Storage
- **Hosting**: Azure App Service (Linux Python)
- **Deployment Size**: 21KB (99.94% reduction from original 36MB)

## **Azure Resources Architecture**

```mermaid
graph TB
    subgraph "Azure Resources"
        AS[Azure App Service<br/>Python 3.11]
        BS[Azure Blob Storage<br/>Public Container]
        AI[Application Insights<br/>Monitoring]
        MI[Managed Identity<br/>Authentication]
    end
    
    subgraph "External Services"
        GA[Google Gemini AI<br/>API Key Required]
    end
    
    subgraph "Data Flow"
        User --> AS
        AS --> BS
        AS --> GA
        AS --> AI
    end
```

**Service Relations:**
- App Service downloads FAISS index and metadata from Blob Storage on first request
- App Service uses Google Gemini AI for response generation with RAG context
- Application Insights monitors performance and logs
- Managed Identity provides secure access to Azure resources

## **Recommended Azure Resources**

**Application: RAG-Transmission-Data**
- **Hosting Service Type**: Azure App Service (Linux)
- **SKU**: B1 Basic (1 core, 1.75GB RAM, $13/month)
  - Performance: Suitable for small to medium traffic
  - Can handle blob storage downloads and AI processing
- **Configuration**:
  - Language: Python 3.11
  - Environment Variables: 
    - `GOOGLE_AI_API_KEY` (required for Gemini AI)
    - `WEBSITES_PORT=8000` (FastAPI default port)
- **Dependencies Resource**:
  - **Azure Blob Storage** (existing)
    - SKU: Standard LRS (Hot tier)
    - Service Type: Storage Account with public blob container
    - Connection Type: Public HTTP URLs (no authentication needed)
    - Environment Variables: None (URLs hardcoded in app)

## **Recommended Supporting Services**
- **Application Insights**: Monitor performance, track blob downloads, API response times
- **User-Assigned Managed Identity**: Future-proof for secure Azure service access
- **Log Analytics Workspace**: Centralized logging for troubleshooting
- **Key Vault**: Store Google AI API key securely (recommended)

## **Recommended Security Configurations**
- User-Assigned Managed Identity with Key Vault access permissions
- Google AI API key stored in Key Vault (not in environment variables)
- Managed Identity assigned to App Service for secure key retrieval

## **Execution Steps**

### 1. Provision Azure Infrastructure with AZD
- [x] **Provisioning tool**: AZD
- [x] **Expected files**: azure.yaml, infra/main.bicep, infra/main.parameters.json
- [ ] Check region availability and quotas
- [ ] Generate AZD configuration files
- [ ] Validate infrastructure with dry run

### 2. Environment Setup for AZD
- [ ] Install AZ CLI and AZD if not installed
- [ ] Create new AZD environment
- [ ] Set required environment variables
- [ ] Configure subscription and resource group

### 3. Deployment
- [ ] Run `azd up --no-prompt`
- [ ] Validate deployment with health checks
- [ ] Test blob storage integration
- [ ] Call `/warmup` endpoint to pre-load data

### 4. Post-Deployment Validation
- [ ] Check application logs
- [ ] Test RAG functionality
- [ ] Verify blob storage downloads
- [ ] Monitor performance metrics

### 5. Summarize Results
- [ ] Generate deployment summary
- [ ] Document URLs and configuration
- [ ] Create troubleshooting guide

## **Progress Tracking**
Progress will be tracked in `.azure/progress.copilotmd` with detailed status updates for each step.